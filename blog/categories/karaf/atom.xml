<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: karaf | Keep It Simple, Stupid]]></title>
  <link href="http://yangtao309.github.io/blog/categories/karaf/atom.xml" rel="self"/>
  <link href="http://yangtao309.github.io/"/>
  <updated>2014-11-14T16:52:51+08:00</updated>
  <id>http://yangtao309.github.io/</id>
  <author>
    <name><![CDATA[samung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[karaf应用中配置数据源]]></title>
    <link href="http://yangtao309.github.io/blog/2014/08/18/karaf-ying-yong-zhong-ru-he-pei-zhi-shu-ju-yuan/"/>
    <updated>2014-08-18T18:52:54+08:00</updated>
    <id>http://yangtao309.github.io/blog/2014/08/18/karaf-ying-yong-zhong-ru-he-pei-zhi-shu-ju-yuan</id>
    <content type="html"><![CDATA[<p>我厂主要系统采用模块化开发以来，就遇到诸多的问题，不过都还可以解决。模块化我们选用了<strong>karaf</strong>这个集成组件。</p>

<p>开发中遇到数据源的配置问题。主要表现在每一位开发的数据库都是分开的，线上产品的数据库也是分开，线上数据库通过<strong>CMDB</strong>工具可以取到相应配置。</p>

<p>要解决以上需求，我们将开发和线上的datasource分成了两个独立的模块，开发对应模块xx-datasource-dev,那么线上对应的就是xx-datasource-production. 为什么要分成两个项目？ 很明显，我们开发环境中没有<strong>CMDB</strong>这样工具来集中管理开发人员的数据库，目前还是开发自己在玩自己的数据库。</p>

<p>这样我们的开发数据库基本上依赖maven来构建。</p>

<p>线上的依赖<strong>CMDB</strong>在初始化客户系统的时候，创建好数据源。看起来一切很ok,但是没法重启。(因为部署的时候消息触发来取<strong>CMDB</strong>的配置信息, 重启只是重启整个<strong>karaf</strong>)</p>

<p>我们考虑到了，需要将线上初始化取到的<strong>CMBD</strong>配置进行持久化(写文件)。 那么在<strong>karaf</strong>环境下如何写文件和读文件呢？</p>

<p>我们参考了<strong>karaf</strong><a href="http://karaf.apache.org/manual/latest/users-guide/configuration.html">官方手册</a>的介绍。</p>

<h3>实例</h3>

<p>首先需要写一个POJO来处理datasource的基础属性，我们这里简单处理只设置driver | url | username | password 4个属性。</p>

<p>程序代码参见<a href="https://github.com/yangtao309/guide-karaf/blob/master/config/src/main/java/com/tzn/tutorial/config/DatasourceConfiguration.java">DatasourceConfiguration</a></p>

<p>定义一个读配置的service，可以在datasource bundle激活器被触发时候来设置数据源并进行服务注册。</p>

<p>程序代码参见<a href="https://github.com/yangtao309/guide-karaf/blob/master/config/src/main/java/com/tzn/tutorial/config/DatasourceConfigurationQuery.java">DatasourceConfigurationQuery</a></p>

<p>程序很简单，关键是配置，目前karaf默认配置应用的是<strong>blueprint</strong>。</p>

<p>配置代码参见<a href="https://github.com/yangtao309/guide-karaf/blob/master/config/src/main/resources/OSGI-INF/blueprint/datasourceConfiguration.xml">datasourceConfiguration.xml</a></p>

<p>以上配置是比较关键的。在整个bundle加载的时候会将<strong>karaf</strong>的/etc/datasource.prop.cfg文件对应起来，并可以通过config命令进行写入值，也可以读取值。</p>

<p>对于在发布该bundle的时候，需要将对应的文件也写入到指定的文件目录:</p>

<p>代码参见<a href="https://github.com/yangtao309/guide-karaf/blob/master/config/src/main/resources/features.xml#L5">features.xml</a></p>

<p>另外要考虑的如何才能符合上述的格式进行安装(configfile).</p>

<p>需要在编译安装的时候进行生成，在<strong>pom.xml</strong>需要用到插件。</p>

<p>代码参见<a href="https://github.com/yangtao309/guide-karaf/blob/master/config/pom.xml#L75">pom.xml</a></p>

<p>这样写好后，只需要在<strong>karaf</strong>里面安装该bundle，然后去指定文件目录确定该文件是否生成。生成后，就可以用<strong>karaf</strong>提供的config命令来进行设置值了。</p>

<p>在后续的datasource bundle的激活器中进行存储和获取。
存取方式分为2种:</p>

<ol>
<li>config:list | config:edit</li>
<li>应用ConfigurationAdmin 程序实现</li>
</ol>


<pre><code>private ConfigurationAdmin configAdmin;

private void updateDatasourceProp(final DatasourceProp datasourceProp) {
        try {
            Configuration configuration = configAdmin.getConfiguration(DatasourceProp.PID);
            Dictionary&lt;String,Object&gt; props = new Hashtable&lt;String,Object&gt;();
            props.put(DatasourceProp.URL_KEY, datasourceProp.getUrl());
            props.put(DatasourceProp.USERNAME_KEY, datasourceProp.getUsername());
            props.put(DatasourceProp.PASSWORD_KEY, datasourceProp.getPassword());
            props.put(DatasourceProp.MIGRATION_KEY, datasourceProp.getMigration());
            configuration.setBundleLocation(null);
            configuration.update(props);
        } catch (final Exception e) {
            logger.error("reason : datasourceProp update failure", e);
            throw new ExceptionInInitializerError(e);
        }
    }

&lt;reference id="configAdmin" interface="org.osgi.service.cm.ConfigurationAdmin"/&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
