<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: maven | Keep It Simple, Stupid]]></title>
  <link href="http://yangtao309.github.io/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://yangtao309.github.io/"/>
  <updated>2014-11-14T16:52:51+08:00</updated>
  <id>http://yangtao309.github.io/</id>
  <author>
    <name><![CDATA[samung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maven 源码分析 (二)]]></title>
    <link href="http://yangtao309.github.io/blog/2014/11/14/mavenyuan-ma-fen-xi-2/"/>
    <updated>2014-11-14T14:03:49+08:00</updated>
    <id>http://yangtao309.github.io/blog/2014/11/14/mavenyuan-ma-fen-xi-2</id>
    <content type="html"><![CDATA[<h4>前言</h4>

<hr />

<p>上一篇文章<a href="/blog/2014/11/14/mavendai-ma-yue-du-1/">Maven 源码分析 (一)</a>介绍了我们如何开始分析Maven源代码，也介绍到了Maven的启动需要依赖与plexus-classworlds这样的类加载框架来负责加载Maven运行命令需要的jar。</p>

<p>在继续本篇的话题之前需要了解Maven包文件中的文件目录以及说明。</p>

<pre><code>xxx-MBP-2:apache-maven-3.1.1 xxx$ tree
.
├── LICENSE
├── NOTICE
├── README.txt
├── bin
│   ├── m2.conf
│   ├── mvn
│   ├── mvn.bat
│   ├── mvnDebug
│   ├── mvnDebug.bat
│   └── mvnyjp
├── boot
│   └── plexus-classworlds-2.5.1.jar
├── conf
│   ├── logging
│   │   └── simplelogger.properties
│   └── settings.xml
└── lib
    ├── aether-api-0.9.0.M2.jar
    ├── 此处省略很多的jar文件
    ├── plexus-interpolation-1.19.jar
    ├── plexus-sec-dispatcher-1.3.jar
    ├── plexus-sec-dispatcher.license
    ├── plexus-utils-3.0.15.jar
    ├── sisu-guice-3.1.3-no_aop.jar
    ├── slf4j-api-1.7.5.jar
    ├── slf4j-api.license
    ├── slf4j-simple-1.7.5.jar
    ├── slf4j-simple.license
    ├── wagon-file-2.4.jar
    ├── wagon-http-2.4-shaded.jar
    └── wagon-provider-api-2.4.jar
</code></pre>

<p><strong>bin目录</strong>，包含了mvn运行的脚本，这些脚本用来配置Java命令，准备好classpath和相关的Java系统属性，然后执行Java命令。其中mvn是基于UNIX平台的shell脚本，mvn.bat是基于Windows平台的bat脚本。在命令行输入任何一条mvn命令时，实际上就是在调用这些脚本。该目录还包含了mvnDebug和mvnDebug.bat两个文件，同样，前者是UNIX平台的shell脚本，后者是windows的bat脚本。那么mvn和mvnDebug有什么区别和关系呢？打开文件我们就可以看到，两者基本是一样的，只是mvnDebug多了一条MAVEN_DEBUG_OPTS配置，作用就是在运行Maven时开启debug，以便调试Maven本身。此外，该目录还包含m2.conf文件，是plexus-classworlds的配置文件。</p>

<p><strong>boot目录</strong>，只包含一个文件，plexus-classworlds是一个类加载器框架，相对于默认的java类加载器，它提供了更丰富的语法以方便配置，Maven使用该框架加载自己的类库。更多classworlds的信息请参考<a href="http://classworlds.codehaus.org/">classworlds</a>，本篇会大篇幅的介绍该框架。</p>

<p><strong>conf目录</strong>，包含了一个非常重要的文件settings.xml。直接修改该文件，就能在机器上全局地定制Maven的行为。一般情况下，我们更偏向于复制该文件至~/.m2/目录下（这里~表示用户目录），然后修改该文件，在用户范围定制Maven的行为。</p>

<p><strong>lib目录</strong>，包含了所有Maven运行时需要的Java类库。</p>

<p><strong>其他文件略</strong>。</p>

<h4>plexus-classworld 是啥？</h4>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven 源码分析 (一)]]></title>
    <link href="http://yangtao309.github.io/blog/2014/11/14/mavendai-ma-yue-du-1/"/>
    <updated>2014-11-14T09:37:48+08:00</updated>
    <id>http://yangtao309.github.io/blog/2014/11/14/mavendai-ma-yue-du-1</id>
    <content type="html"><![CDATA[<h4>开篇</h4>

<hr />

<ul>
<li><p>Maven 源代码下载</p>

<p>下载地址<a href="https://git-wip-us.apache.org/repos/asf/maven.git">maven source</a> 通过git clone 然后切换到maven-3.1.1</p></li>
<li><p>Maven 安装包(tar.gz|zip)</p>

<p>下载地址<a href="http://mirrors.cnnic.cn/apache/maven/maven-3/3.1.1/binaries/apache-maven-3.1.1-bin.zip">apache-maven-3.1.1-bin.zip</a> 将其下载。</p></li>
<li><p>类加载框架plexus-classworlds</p>

<p>下载地址<a href="https://github.com/sonatype/plexus-classworlds/tree/plexus-classworlds-2.5.1">plexus-classworlds-2.5.1</a></p></li>
<li><p>代码组织结构</p>

<p>图一</p>

<p><img src="/images/01BA59BB-B9F9-437E-B03E-DCD637F180F9.png" alt="Alt text" /></p></li>
</ul>


<h4>Main 函数在哪里？</h4>

<hr />

<p>我们先看看apache-maven-3.1.1下mvn脚本，源文件在<a href="https://github.com/yangtao309/maven-tutorial/blob/master/apache-maven-3.1.1/bin/mvn#L185">mvn</a></p>

<p>看到该文件的最后</p>

<pre><code>CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

exec "$JAVACMD" \
  $MAVEN_OPTS \
  -classpath "${M2_HOME}"/boot/plexus-classworlds-*.jar \
  "-Dclassworlds.conf=${M2_HOME}/bin/m2.conf" \
  "-Dmaven.home=${M2_HOME}"  \
  ${CLASSWORLDS_LAUNCHER} "$@"
</code></pre>

<p>可以看到这里用到了plexus-classworlds 类加载框架，启动maven的<a href="https://github.com/yangtao309/maven-tutorial/blob/master/plexus-classworlds/src/main/java/org/codehaus/plexus/classworlds/launcher/Launcher.java#L352">Laucher#main</a></p>

<p>源文件参考<a href="https://github.com/yangtao309/maven-tutorial/blob/master/apache-maven-3.1.1/bin/m2.conf#L1">m2.conf</a></p>

<pre><code>main is org.apache.maven.cli.MavenCli from plexus.core

// 注释掉 // set maven.home default ${user.home}/m2

set maven.home default /Users/yangtao/maven-tutorial/apache-maven-3.1.1

[plexus.core]
optionally ${maven.home}/lib/ext/*.jar
load       ${maven.home}/lib/*.jar
load       ${maven.home}/conf/logging
</code></pre>

<p>在这里，我们可以试着通过debug代码来逐步了解。
本文的案例是在intellij里面操作的，那么我们需要在启动Laucher.main()的时候，设置部分参数；</p>

<p>图二</p>

<p><img src="/images/E23A5265-D9D8-47C2-9B4E-0A8F7C57FFB6.png" alt="Alt text" /></p>

<p>下面我来仔细看看Laucher.main()做了什么</p>

<pre><code>public static void main( String[] args )
    {
        try
        {
             // 1
            int exitCode = mainWithExitCode( args );

            System.exit( exitCode );
        }
        catch ( Exception e )
        {
            e.printStackTrace();

            System.exit( 100 );
        }
    }
</code></pre>

<p>标记为1处，处理传入参数并返回退出代码，我们细致的来看下<a href="https://github.com/yangtao309/maven-tutorial/blob/master/plexus-classworlds/src/main/java/org/codehaus/plexus/classworlds/launcher/Launcher.java#L375">mainWithExitCode</a>做了什么？</p>

<pre><code>public static int mainWithExitCode( String[] args )
        throws Exception
    {
        String classworldsConf = System.getProperty( CLASSWORLDS_CONF );

        // 此处省略读classworlds_conf参数的处理
        // 1
        launcher.configure( is );

        is.close();

        try
        {
            // 2
            launcher.launch( args );
        }
        catch ( InvocationTargetException e )
        {
            ClassRealm realm = launcher.getWorld().getRealm( launcher.getMainRealmName() );

            URL[] constituents = realm.getURLs();

            // 省略 异常处理细节
            // Else just toss the ITE
            throw e;
        }

        return launcher.getExitCode();
    }
</code></pre>

<p>标记1处，读m2.conf的配置文件，并进行解析。</p>

<p>标记2处，反射调用MavenCli.main()，去执行mvn相关的命令。</p>

<p>下一篇文章主要介绍plexus-classworlds是怎么来解析配置并调用指定主函数的？<a href="/blog/2014/11/14/mavenyuan-ma-fen-xi-2/">Maven 源码分析 (二)</a></p>
]]></content>
  </entry>
  
</feed>
