<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: maven | Keep It Simple, Stupid]]></title>
  <link href="http://yangtao309.github.io/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://yangtao309.github.io/"/>
  <updated>2014-11-14T15:07:49+08:00</updated>
  <id>http://yangtao309.github.io/</id>
  <author>
    <name><![CDATA[samung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maven 源码分析 (二)]]></title>
    <link href="http://yangtao309.github.io/blog/2014/11/14/mavenyuan-ma-fen-xi-2/"/>
    <updated>2014-11-14T14:03:49+08:00</updated>
    <id>http://yangtao309.github.io/blog/2014/11/14/mavenyuan-ma-fen-xi-2</id>
    <content type="html"><![CDATA[<h4>前言</h4>

<p>上一篇文章<a href="blog/2014/11/14/mavendai-ma-yue-du-1/">Maven 源码分析 (一)</a>介绍了我们如何开始分析Maven源代码，也介绍到了Maven的启动需要依赖与plexus-classworlds这样的类加载框架来负责加载Maven运行命令需要的jar。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven 源码分析（一）]]></title>
    <link href="http://yangtao309.github.io/blog/2014/11/14/mavendai-ma-yue-du-1/"/>
    <updated>2014-11-14T09:37:48+08:00</updated>
    <id>http://yangtao309.github.io/blog/2014/11/14/mavendai-ma-yue-du-1</id>
    <content type="html"><![CDATA[<h4>Maven 源代码下载</h4>

<p>下载地址<a href="https://git-wip-us.apache.org/repos/asf/maven.git">maven source</a> 通过git clone 然后切换到maven-3.1.1</p>

<h4>Maven 安装包(tar.gz|zip)</h4>

<p>下载地址<a href="http://mirrors.cnnic.cn/apache/maven/maven-3/3.1.1/binaries/apache-maven-3.1.1-bin.zip">apache-maven-3.1.1-bin.zip</a> 将其下载。</p>

<h4>类加载框架plexus-classworlds</h4>

<p>下载地址<a href="https://github.com/sonatype/plexus-classworlds/tree/plexus-classworlds-2.5.1">plexus-classworlds-2.5.1</a></p>

<h4>代码组织结构</h4>

<p>图一</p>

<p><img src="/images/01BA59BB-B9F9-437E-B03E-DCD637F180F9.png" alt="Alt text" /></p>

<h5>Main 函数在哪里？</h5>

<p>我们先看看apache-maven-3.1.1下mvn脚本，源文件在<a href="https://github.com/yangtao309/maven-tutorial/blob/master/apache-maven-3.1.1/bin/mvn#L185">mvn</a></p>

<p>看到该文件的最后</p>

<pre><code>CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

exec "$JAVACMD" \
  $MAVEN_OPTS \
  -classpath "${M2_HOME}"/boot/plexus-classworlds-*.jar \
  "-Dclassworlds.conf=${M2_HOME}/bin/m2.conf" \
  "-Dmaven.home=${M2_HOME}"  \
  ${CLASSWORLDS_LAUNCHER} "$@"
</code></pre>

<p>可以看到这里用到了plexus-classworlds 类加载框架，启动maven的<a href="https://github.com/yangtao309/maven-tutorial/blob/master/plexus-classworlds/src/main/java/org/codehaus/plexus/classworlds/launcher/Launcher.java#L352">Laucher#main</a></p>

<p>源文件参考<a href="https://github.com/yangtao309/maven-tutorial/blob/master/apache-maven-3.1.1/bin/m2.conf#L1">m2.conf</a></p>

<pre><code>main is org.apache.maven.cli.MavenCli from plexus.core

// 注释掉 // set maven.home default ${user.home}/m2

set maven.home default /Users/yangtao/maven-tutorial/apache-maven-3.1.1

[plexus.core]
optionally ${maven.home}/lib/ext/*.jar
load       ${maven.home}/lib/*.jar
load       ${maven.home}/conf/logging
</code></pre>

<p>在这里，我们可以试着通过debug代码来逐步了解。
本文的案例是在intellij里面操作的，那么我们需要在启动Laucher.main()的时候，设置部分参数；</p>

<p>图二</p>

<p><img src="/images/E23A5265-D9D8-47C2-9B4E-0A8F7C57FFB6.png" alt="Alt text" /></p>

<p>下面我来仔细看看Laucher.main()做了什么</p>

<pre><code>public static void main( String[] args )
    {
        try
        {
             // 1
            int exitCode = mainWithExitCode( args );

            System.exit( exitCode );
        }
        catch ( Exception e )
        {
            e.printStackTrace();

            System.exit( 100 );
        }
    }
</code></pre>

<p>标记为1处，处理传入参数并返回退出代码，我们细致的来看下<a href="https://github.com/yangtao309/maven-tutorial/blob/master/plexus-classworlds/src/main/java/org/codehaus/plexus/classworlds/launcher/Launcher.java#L375">mainWithExitCode</a>做了什么？</p>

<pre><code>public static int mainWithExitCode( String[] args )
        throws Exception
    {
        String classworldsConf = System.getProperty( CLASSWORLDS_CONF );

        // 此处省略读classworlds_conf参数的处理
        // 1
        launcher.configure( is );

        is.close();

        try
        {
            // 2
            launcher.launch( args );
        }
        catch ( InvocationTargetException e )
        {
            ClassRealm realm = launcher.getWorld().getRealm( launcher.getMainRealmName() );

            URL[] constituents = realm.getURLs();

            // 省略 异常处理细节
            // Else just toss the ITE
            throw e;
        }

        return launcher.getExitCode();
    }
</code></pre>

<p>标记1处，读m2.conf的配置文件，并进行解析。</p>

<p>标记2处，反射调用MavenCli.main()，去执行mvn相关的命令。</p>

<p>下一篇文章主要介绍plexus-classworlds是怎么来解析配置并调用指定主函数的？<a href="blog/2014/11/14/mavenyuan-ma-fen-xi-2/">Maven 源码分析之第二篇</a></p>
]]></content>
  </entry>
  
</feed>
